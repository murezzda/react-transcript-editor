{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./packages/util/timecode-converter/src/secondsToTimecode.js","webpack:///./packages/util/timecode-converter/src/timecodeToSeconds.js","webpack:///./packages/util/timecode-converter/src/padTimeToTimecode.js","webpack:///./packages/util/timecode-converter/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","secondsToTimecode","seconds","framePerSeconds","_padZero","concat","parseInt","fps","normalisedSeconds","Math","floor","toPrecision","toFixed","normalisePlayerTime","wholeSeconds","frames","timecodeToSecondsHelper","tc","split","timecodeToFrames","isOneDigit","str","length","padTimeToTimecode","time","timecode","includes","includesFullStop","replace","__webpack_exports__","timecode_converter_timecodeToSeconds","shortTimecode","src_secondsToTimecode","timecodeToSeconds","resultPadded","parseFloat","slice"],"mappings":"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","file":"timecodeConverter.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","/**\r\n* Raised in this comment https://github.com/bbc/react-transcript-editor/pull/9\r\n* abstracted from https://github.com/bbc/newslabs-cdn/blob/master/js/20-bbcnpf.utils.js\r\n* In broadcast VIDEO, timecode is NOT hh:mm:ss:ms, it's hh:mm:ss:ff where ff is frames,\r\n* dependent on the framerate of the media concerned.\r\n* `hh:mm:ss:ff`\r\n*/\r\n\r\n/**\r\n * Helper function\r\n * Rounds to the 14milliseconds boundaries\r\n * Time in video can only \"exist in\" 14milliseconds boundaries.\r\n * This makes it possible for the HTML5 player to be frame accurate.\r\n * @param {*} seconds\r\n * @param {*} fps\r\n */\r\nconst normalisePlayerTime = function (seconds, fps) {\r\n  return Number((1.0 / fps * Math.floor(Number((fps * seconds).toPrecision(12)))).toFixed(2));\r\n};\r\n\r\n/*\r\n* @param {*} seconds\r\n* @param {*} fps\r\n*/\r\nconst secondsToTimecode = function (seconds, framePerSeconds) {\r\n  // written for PAL non-drop timecode\r\n  let fps = 25;\r\n  if (framePerSeconds !== undefined) {\r\n    fps = framePerSeconds;\r\n  }\r\n\r\n  const normalisedSeconds = normalisePlayerTime(seconds, fps);\r\n\r\n  const wholeSeconds = Math.floor(normalisedSeconds);\r\n  const frames = ((normalisedSeconds - wholeSeconds) * fps).toFixed(2);\r\n\r\n  // prepends zero - example pads 3 to 03\r\n  function _padZero(n) {\r\n    if (n < 10) return `0${ parseInt(n) }`;\r\n\r\n    return parseInt(n);\r\n  }\r\n\r\n  return `${ _padZero((wholeSeconds / 60 / 60) % 60)\r\n  }:${\r\n    _padZero((wholeSeconds / 60) % 60)\r\n  }:${\r\n    _padZero(wholeSeconds % 60)\r\n  }:${\r\n    _padZero(frames) }`;\r\n};\r\n\r\nexport default secondsToTimecode;\r\n","/**\r\n * Helperf unction\r\n * @param {*} tc\r\n * @param {*} fps\r\n */\r\nconst timecodeToFrames = function (tc, fps) {\r\n  // TODO make 29.97 fps drop-frame aware - works for 25 only.\r\n\r\n  const s = tc.split(':');\r\n  let frames = parseInt(s[3]);\r\n  frames += parseInt(s[2]) * fps;\r\n  frames += parseInt(s[1]) * (fps * 60);\r\n  frames += parseInt(s[0]) * (fps * 60 * 60);\r\n\r\n  return frames;\r\n};\r\n\r\n/**\r\n * Convert broadcast timecodes to seconds\r\n * @param {*} tc - `hh:mm:ss:ff`\r\n * @param {*} framePerSeconds - defaults to 25 if not provided\r\n */\r\nconst timecodeToSecondsHelper = function (tc, framePerSeconds) {\r\n  let fps = 25;\r\n  if (framePerSeconds !== undefined) {\r\n    fps = framePerSeconds;\r\n  }\r\n  const frames = timecodeToFrames(tc, fps);\r\n\r\n  return Number(Number(frames / fps).toFixed(2));\r\n};\r\n\r\nexport default timecodeToSecondsHelper;\r\n","const countColon = timecode => timecode.split(':').length;\r\n\r\nconst includesFullStop = timecode => timecode.includes('.');\r\n\r\nconst isOneDigit = str => str.length === 1;\r\n\r\nconst padTimeToTimecode = (time) => {\r\n  if (typeof time === 'string') {\r\n    switch (countColon(time)) {\r\n    case 4:\r\n      // is already in timecode format\r\n      // hh:mm:ss:ff\r\n      return time;\r\n    case 2:\r\n      // m:ss\r\n      if (isOneDigit(time.split(':')[0])) {\r\n        return `00:0${ time }:00`;\r\n      }\r\n\r\n      return `00:${ time }:00`;\r\n    case 3:\r\n      // hh:mm:ss\r\n      return `${ time }:00`;\r\n    default:\r\n      // mm.ss\r\n      if (includesFullStop(time)) {\r\n        // m.ss\r\n        if (isOneDigit(time.split('.')[0])) {\r\n          return `00:0${ time.split('.')[0] }:${ time.split('.')[1] }:00`;\r\n        }\r\n\r\n        return `00:${ time.replace('.', ':') }:00`;\r\n      }\r\n\r\n      // if just int, then it's seconds\r\n      // s\r\n      if (isOneDigit(time)) {\r\n        return `00:00:0${ time }:00`;\r\n      }\r\n\r\n      return `00:00:${ time }:00`;\r\n    }\r\n    // edge case if it's number return a number coz cannot refactor\r\n    // TODO: might need to refactor and move this elsewhere\r\n  } else {\r\n    return time;\r\n  }\r\n};\r\n\r\nexport default padTimeToTimecode;\r\n","/**\r\n * Wrapping around \"time stamps\" and timecode conversion modules\r\n * To provide more support for variety of formats.\r\n */\r\nimport secondsToTimecode from './src/secondsToTimecode';\r\nimport timecodeToSecondsHelper from './src/timecodeToSeconds';\r\nimport padTimeToTimecode from './src/padTimeToTimecode';\r\n\r\n/**\r\n * @param {*} time\r\n * Can take as input timecodes in the following formats\r\n * - hh:mm:ss:ff\r\n * - mm:ss\r\n * - m:ss\r\n * - ss - seconds --> if it's already in seconds then it just returns seconds\r\n * - hh:mm:ff\r\n * @todo could be refactored with some helper functions for clarity\r\n */\r\nconst timecodeToSeconds = (time) => {\r\n  if (typeof time === 'string') {\r\n    const resultPadded = padTimeToTimecode(time);\r\n    const resultConverted = timecodeToSecondsHelper(resultPadded);\r\n\r\n    return resultConverted;\r\n  }\r\n\r\n  // assuming it receive timecode as seconds as string '600'\r\n  return parseFloat(time);\r\n};\r\n\r\nconst shortTimecode = (time) => {\r\n  const timecode = secondsToTimecode(time);\r\n\r\n  return timecode.slice(0, -3);\r\n};\r\n\r\nexport { secondsToTimecode, timecodeToSeconds, shortTimecode };\r\n"],"sourceRoot":""}