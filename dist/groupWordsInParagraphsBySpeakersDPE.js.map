{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./packages/stt-adapters/digital-paper-edit/group-words-by-speakers.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","groupWordsInParagraphsBySpeakers","words","segments","results","currentSegment","currentSegmentIndex","previousSegmentIndex","paragraph","text","speaker","forEach","word","find","seg","start","end","findSegmentForWord","indexOf","push","trim","addWordsToSpeakersParagraphs"],"mappings":"2BACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QA0DA,OArDAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,sCClFAnC,EAAAkB,EAAAkB,GA4IeC,UA9Df,SAA0CC,EAAOC,GAG/C,OAGF,SAAuCD,EAAOC,GAAU,IAChDC,EAAU,GACZC,EAAiB,MACjBC,EAAsB,EACtBC,EAAuB,EACvBC,EAAY,CAAEN,MAAO,GAAIO,KAAM,GAAIC,QAAS,IAwBhD,OAvBAR,EAAMS,QAAQ,SAACC,IACbP,EAsCJ,SAA4BO,EAAMT,GAQhC,OANmBA,EAASU,KAAK,SAACC,GAChC,GAAKF,EAAKG,OAASD,EAAIC,OAAWH,EAAKI,KAAOF,EAAIE,IAChD,OAAOF,IA1CQG,CAAmBL,EAAMT,OAGxCG,EAAsBH,EAASe,QAAQb,MACXE,GAC1BC,EAAUN,MAAMiB,KAAKP,GACrBJ,EAAUC,MAAQG,EAAKH,KAAO,IAC9BD,EAAUE,QAAUL,EAAeK,UAGnCH,EAAuBD,EACvBE,EAAUC,KAAKW,OACfhB,EAAQe,KAAKX,IACbA,EAAY,CAAEN,MAAO,GAAIO,KAAM,GAAIC,QAAS,KAClCR,MAAMiB,KAAKP,GACrBJ,EAAUC,MAAQG,EAAKH,KAAO,IAC9BD,EAAUE,QAAUL,EAAeK,YAIzCN,EAAQe,KAAKX,GAENJ,EAlCQiB,CAA6BnB,EAAOC","file":"groupWordsInParagraphsBySpeakersDPE.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 49);\n","/**\r\n edge cases\r\n- more segments then words - not an issue if you start by matching words with segment\r\nand handle edge case where it doesn't find a match\r\n- more words then segments - orphan words?\r\n*\r\n* Takes in list of words and list of paragraphs (paragraphs have speakers info associated with it)\r\n```js\r\n{\r\n  \"words\": [\r\n    {\r\n      \"id\": 0,\r\n      \"start\": 13.02,\r\n      \"end\": 13.17,\r\n      \"text\": \"There\"\r\n    },\r\n    {\r\n      \"id\": 1,\r\n      \"start\": 13.17,\r\n      \"end\": 13.38,\r\n      \"text\": \"is\"\r\n    },\r\n    ...\r\n    ],\r\n  \"paragraphs\": [\r\n    {\r\n      \"id\": 0,\r\n      \"start\": 13.02,\r\n      \"end\": 13.86,\r\n      \"speaker\": \"TBC 00\"\r\n    },\r\n    {\r\n      \"id\": 1,\r\n      \"start\": 13.86,\r\n      \"end\": 19.58,\r\n      \"speaker\": \"TBC 1\"\r\n    },\r\n    ...\r\n  ]\r\n}\r\n```\r\n*  and returns a list of words grouped into paragraphs, with words, text and speaker attribute\r\n```js\r\n[\r\n  {\r\n    \"words\": [\r\n      {\r\n        \"id\": 0,\r\n        \"start\": 13.02,\r\n        \"end\": 13.17,\r\n        \"text\": \"There\"\r\n      },\r\n      {\r\n        \"id\": 1,\r\n        \"start\": 13.17,\r\n        \"end\": 13.38,\r\n        \"text\": \"is\"\r\n      },\r\n      {\r\n        \"id\": 2,\r\n        \"start\": 13.38,\r\n        \"end\": 13.44,\r\n        \"text\": \"a\"\r\n      },\r\n      {\r\n        \"id\": 3,\r\n        \"start\": 13.44,\r\n        \"end\": 13.86,\r\n        \"text\": \"day.\"\r\n      }\r\n    ],\r\n    \"text\": \"There is a day.\",\r\n    \"speaker\": \"TBC 00\"\r\n  },\r\n  ...\r\n]\r\n```\r\n */\r\nfunction groupWordsInParagraphsBySpeakers(words, segments) {\r\n  const result = addWordsToSpeakersParagraphs(words, segments);\r\n\r\n  return result;\r\n};\r\n\r\nfunction addWordsToSpeakersParagraphs (words, segments) {\r\n  const results = [];\r\n  let currentSegment = 'UKN';\r\n  let currentSegmentIndex = 0;\r\n  let previousSegmentIndex = 0;\r\n  let paragraph = { words: [], text: '', speaker: '' };\r\n  words.forEach((word) => {\r\n    currentSegment = findSegmentForWord(word, segments);\r\n    // if a segment exists for the word\r\n    if (currentSegment) {\r\n      currentSegmentIndex = segments.indexOf(currentSegment);\r\n      if (currentSegmentIndex === previousSegmentIndex) {\r\n        paragraph.words.push(word);\r\n        paragraph.text += word.text + ' ';\r\n        paragraph.speaker = currentSegment.speaker;\r\n      }\r\n      else {\r\n        previousSegmentIndex = currentSegmentIndex;\r\n        paragraph.text.trim();\r\n        results.push(paragraph);\r\n        paragraph = { words: [], text: '', speaker: '' };\r\n        paragraph.words.push(word);\r\n        paragraph.text += word.text + ' ';\r\n        paragraph.speaker = currentSegment.speaker;\r\n      }\r\n    }\r\n  });\r\n  results.push(paragraph);\r\n\r\n  return results;\r\n}\r\n\r\n/**\r\n* Helper functions\r\n*/\r\n\r\n/**\r\n* given word start and end time attributes\r\n* looks for segment range that contains that word\r\n* if it doesn't find any it returns a segment with `UKN`\r\n* speaker attributes.\r\n* @param {object} word - word object\r\n* @param {array} segments - list of segments objects\r\n* @return {object} - a single segment whose range contains the word\r\n*/\r\nfunction findSegmentForWord(word, segments) {\r\n\r\n  const tmpSegment = segments.find((seg) => {\r\n    if ((word.start >= seg.start) && (word.end <= seg.end)) {\r\n      return seg;\r\n    }\r\n  });\r\n\r\n  return tmpSegment;\r\n}\r\n\r\nexport default groupWordsInParagraphsBySpeakers;"],"sourceRoot":""}